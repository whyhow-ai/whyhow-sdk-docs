{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the WhyHow Automated Knowledge Graph Studio SDK Documentation","text":"<p>The WhyHow Knowledge Graph Studio SDK enables you to quickly and easily build automated knowledge graphs tailored to your unique worldview. Instantly build, extend, and query well-scoped KGs using a raw PDF or CSV and simple seed concepts in natural language.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li> <p>Flexible Data Ingestion &amp; Framework integration: Plug your existing structured and unstructured data pre-processing pipelines into our graph creation process and Graph Studio</p> </li> <li> <p>Flexible Querying Logic &amp; Answer Construction: Build on top of our Graph Querying Engine to enhance and customize the information coming from the graph</p> </li> <li> <p>Flexible Multi Graph&lt;&gt;Agentic Workflows: Build multi-graph multi-agent workflows with modular WhyHow graphs</p> </li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<ol> <li>Install the package by following the Installation Guide</li> <li>Initialize the SDK client with your WhyHow API key</li> <li>Create a workspace and add raw documents using <code>client.documents.upload()</code></li> <li>Create a graph for the workspace using <code>client.graphs.create()</code> using a list of seed concepts</li> <li>Query the graph with natural language using <code>client.graphs.query_unstructured()</code></li> </ol> <p>For a detailed walkthrough and code examples, check out the Tutorial.</p>"},{"location":"api/","title":"API Reference","text":"<p>This document provides a reference for the WhyHow API.</p> <p>All synchronous functions in WhyHow API have corresponding asynchronous counterparts. WhyHow client is essentially a thin wrapper around httpx, which provides flexibility for customization. Users should close the client when it's no longer needed, as outlined in the httpx documentation.</p>"},{"location":"api/#whyhow.client","title":"client","text":"<p>Implementation of the client logic.</p>"},{"location":"api/#whyhow.client.AsyncWhyHow","title":"AsyncWhyHow","text":"<pre><code>AsyncWhyHow(api_key: str | None = None, base_url: str | None = None, httpx_kwargs: dict[str, Any] | None = None)\n</code></pre> <p>Asynchronous client for the WhyHow API.</p> <p>Parameters:</p> <ul> <li> <code>api_key</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The API key to use for authentication. If not provided, the WHYHOW_API_KEY environment variable will be used.</p> </li> <li> <code>base_url</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The base URL for the API.</p> </li> <li> <code>httpx_kwargs</code>               (<code>dict</code>, default:                   <code>None</code> )           \u2013            <p>Additional keyword arguments to pass to the httpx async client.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>httpx_client</code>               (<code>AsyncClient</code>)           \u2013            <p>An async httpx client.</p> </li> </ul>"},{"location":"api/#whyhow.client.AsyncWhyHow.close","title":"close  <code>async</code>","text":"<pre><code>close() -&gt; None\n</code></pre> <p>Close the async client.</p>"},{"location":"api/#whyhow.client.WhyHow","title":"WhyHow","text":"<pre><code>WhyHow(api_key: str | None = None, base_url: str | None = None, httpx_kwargs: dict[str, Any] | None = None)\n</code></pre> <p>Synchronous client for the WhyHow API.</p> <p>Parameters:</p> <ul> <li> <code>api_key</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The API key to use for authentication. If not provided, the WHYHOW_API_KEY environment variable will be used.</p> </li> <li> <code>base_url</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The base URL for the API.</p> </li> <li> <code>httpx_kwargs</code>               (<code>dict</code>, default:                   <code>None</code> )           \u2013            <p>Additional keyword arguments to pass to the httpx client.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>httpx_client</code>               (<code>Client</code>)           \u2013            <p>A synchronous httpx client.</p> </li> </ul>"},{"location":"api/#whyhow.client.WhyHow.close","title":"close","text":"<pre><code>close() -&gt; None\n</code></pre> <p>Close the client.</p>"},{"location":"api/#whyhow.resources","title":"resources","text":"<p>Collection of route specific resources.</p>"},{"location":"api/#whyhow.resources.AsyncChunksResource","title":"AsyncChunksResource","text":"<p>               Bases: <code>AsyncResource</code></p> <p>Chunk resource.</p>"},{"location":"api/#whyhow.resources.AsyncChunksResource.get","title":"get  <code>async</code>","text":"<pre><code>get(chunk_id: str, include_embeddings: bool | None = None) -&gt; Chunk\n</code></pre> <p>Get chunk by ID.</p> <p>Parameters:</p> <ul> <li> <code>chunk_id</code>               (<code>str</code>)           \u2013            <p>The ID of the chunk.</p> </li> <li> <code>include_embeddings</code>               (<code>bool</code>, default:                   <code>None</code> )           \u2013            <p>Whether to include embeddings.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Chunk</code>           \u2013            <p>The chunk.</p> </li> </ul>"},{"location":"api/#whyhow.resources.AsyncChunksResource.get_all","title":"get_all  <code>async</code>","text":"<pre><code>get_all(limit: int = 10, workspace_id: str | None = None, workspace_name: str | None = None, document_id: str | None = None, document_filename: str | None = None, include_embeddings: bool | None = None) -&gt; AsyncIterator[Chunk]\n</code></pre> <p>Get all chunks.</p> <p>Parameters:</p> <ul> <li> <code>limit</code>               (<code>int</code>, default:                   <code>10</code> )           \u2013            <p>The number of chunks to return.</p> </li> <li> <code>workspace_id</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The ID of the workspace.</p> </li> <li> <code>workspace_name</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The name of the workspace.</p> </li> <li> <code>document_id</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The ID of the document.</p> </li> <li> <code>document_filename</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The filename of the document.</p> </li> <li> <code>include_embeddings</code>               (<code>bool</code>, default:                   <code>None</code> )           \u2013            <p>Whether to include embeddings.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>AsyncIterator[Chunk]</code>           \u2013            <p>The chunk iterator.</p> </li> </ul> <p>Yields:</p> <ul> <li> <code>Chunk</code>           \u2013            <p>The chunk.</p> </li> </ul>"},{"location":"api/#whyhow.resources.AsyncDocumentsResource","title":"AsyncDocumentsResource","text":"<p>               Bases: <code>AsyncResource</code></p> <p>Async documents resource.</p>"},{"location":"api/#whyhow.resources.AsyncDocumentsResource.delete","title":"delete  <code>async</code>","text":"<pre><code>delete(document_id: str) -&gt; Document\n</code></pre> <p>Delete a document.</p> <p>Parameters:</p> <ul> <li> <code>document_id</code>               (<code>str</code>)           \u2013            <p>The document ID.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Document</code>           \u2013            <p>The document.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>If the document is deleted but not returned.</p> </li> </ul>"},{"location":"api/#whyhow.resources.AsyncDocumentsResource.get","title":"get  <code>async</code>","text":"<pre><code>get(document_id: str) -&gt; Document\n</code></pre> <p>Get documents.</p> <p>Parameters:</p> <ul> <li> <code>document_id</code>               (<code>str</code>)           \u2013            <p>The document ID.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Document</code>           \u2013            <p>The document.</p> </li> </ul>"},{"location":"api/#whyhow.resources.AsyncDocumentsResource.get_all","title":"get_all  <code>async</code>","text":"<pre><code>get_all(limit: int = 10, filename: str | None = None, workspace_id: str | None = None, workspace_name: str | None = None) -&gt; AsyncIterator[Document]\n</code></pre> <p>Get all documents.</p> <p>Parameters:</p> <ul> <li> <code>limit</code>               (<code>int</code>, default:                   <code>10</code> )           \u2013            <p>The number of documents to return.</p> </li> <li> <code>filename</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The filename.</p> </li> <li> <code>workspace_id</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The workspace ID.</p> </li> <li> <code>workspace_name</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The workspace name.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>AsyncIterator[Document]</code>           \u2013            <p>The document iterator.</p> </li> </ul> <p>Yields:</p> <ul> <li> <code>Document</code>           \u2013            <p>The document.</p> </li> </ul>"},{"location":"api/#whyhow.resources.AsyncDocumentsResource.upload","title":"upload  <code>async</code>","text":"<pre><code>upload(path: str | Path, workspace_id: str, max_seconds: int = 60, sleep_seconds: float = 1.5) -&gt; Document\n</code></pre> <p>Upload a document.</p> <p>Parameters:</p> <ul> <li> <code>path</code>               (<code>Path</code>)           \u2013            <p>The path to the document.</p> </li> <li> <code>workspace_id</code>               (<code>str</code>)           \u2013            <p>The workspace ID.</p> </li> <li> <code>max_seconds</code>               (<code>int</code>, default:                   <code>60</code> )           \u2013            <p>The maximum number of seconds to wait for the document to be uploaded/processed.</p> </li> <li> <code>sleep_seconds</code>               (<code>float</code>, default:                   <code>1.5</code> )           \u2013            <p>The number of seconds to sleep between polling.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Document</code>           \u2013            <p>The document.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>FileNotFoundError</code>             \u2013            <p>If the file is not found.</p> </li> <li> <code>ValueError</code>             \u2013            <p>If the file format is not supported or the upload failed.</p> </li> </ul>"},{"location":"api/#whyhow.resources.AsyncGraphsResource","title":"AsyncGraphsResource","text":"<p>               Bases: <code>AsyncResource</code></p> <p>Graph resources.</p>"},{"location":"api/#whyhow.resources.AsyncGraphsResource.create","title":"create  <code>async</code>","text":"<pre><code>create(name: str, workspace_id: str, schema_id: str, mode: CREATION_MODE = 'unstructured', document_ids: list[str] | None = None) -&gt; Graph\n</code></pre> <p>Create a graph.</p> <p>Parameters:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The name of the graph.</p> </li> <li> <code>workspace_id</code>               (<code>str</code>)           \u2013            <p>The ID of the workspace.</p> </li> <li> <code>schema_id</code>               (<code>str</code>)           \u2013            <p>The ID of the schema.</p> </li> <li> <code>mode</code>               (<code>Literal['unstructured', 'structured', 'mixed']</code>, default:                   <code>'unstructured'</code> )           \u2013            <p>The creation mode.</p> </li> <li> <code>document_ids</code>               (<code>list[str]</code>, default:                   <code>None</code> )           \u2013            <p>The IDs of the documents.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Graph</code>           \u2013            <p>The graph.</p> </li> </ul>"},{"location":"api/#whyhow.resources.AsyncGraphsResource.export_cypher","title":"export_cypher  <code>async</code>","text":"<pre><code>export_cypher(graph_id: str) -&gt; str\n</code></pre> <p>Export a graph to Cypher.</p> <p>Parameters:</p> <ul> <li> <code>graph_id</code>               (<code>str</code>)           \u2013            <p>The ID of the graph.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The Cypher text.</p> </li> </ul>"},{"location":"api/#whyhow.resources.AsyncGraphsResource.get","title":"get  <code>async</code>","text":"<pre><code>get(graph_id: str) -&gt; Graph\n</code></pre> <p>Get a graph by its ID.</p> <p>Parameters:</p> <ul> <li> <code>graph_id</code>               (<code>str</code>)           \u2013            <p>The ID of the graph.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Graph</code>           \u2013            <p>The graph.</p> </li> </ul>"},{"location":"api/#whyhow.resources.AsyncGraphsResource.get_all","title":"get_all  <code>async</code>","text":"<pre><code>get_all(limit: int = 10, name: str | None = None, workspace_id: str | None = None, workspace_name: str | None = None, schema_id: str | None = None, schema_name: str | None = None) -&gt; AsyncIterator[Graph]\n</code></pre> <p>Get all graphs.</p> <p>Parameters:</p> <ul> <li> <code>limit</code>               (<code>int</code>, default:                   <code>10</code> )           \u2013            <p>The number of graphs to return.</p> </li> <li> <code>name</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The name of the graph.</p> </li> <li> <code>workspace_id</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The ID of the workspace.</p> </li> <li> <code>workspace_name</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The name of the workspace.</p> </li> <li> <code>schema_id</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The ID of the schema.</p> </li> <li> <code>schema_name</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The name of the schema.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>AsyncIterator[Graph]</code>           \u2013            <p>The graph iterator.</p> </li> </ul> <p>Yields:</p> <ul> <li> <code>Graph</code>           \u2013            <p>The graph.</p> </li> </ul>"},{"location":"api/#whyhow.resources.AsyncGraphsResource.get_all_triples","title":"get_all_triples  <code>async</code>","text":"<pre><code>get_all_triples(graph_id: str, limit: int = 10) -&gt; AsyncIterator[Triple]\n</code></pre> <p>Get all triples.</p> <p>Parameters:</p> <ul> <li> <code>graph_id</code>               (<code>str</code>)           \u2013            <p>The ID of the graph.</p> </li> <li> <code>limit</code>               (<code>int</code>, default:                   <code>10</code> )           \u2013            <p>The number of triples to return.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>AsyncIterator[Triple]</code>           \u2013            <p>The triple iterator.</p> </li> </ul> <p>Yields:</p> <ul> <li> <code>Triple</code>           \u2013            <p>The triple.</p> </li> </ul>"},{"location":"api/#whyhow.resources.AsyncGraphsResource.query_structured","title":"query_structured  <code>async</code>","text":"<pre><code>query_structured(graph_id: str, entities: list[str] | None = None, relations: list[str] | None = None, values: list[str] | None = None) -&gt; Query\n</code></pre> <p>Structured query.</p>"},{"location":"api/#whyhow.resources.AsyncGraphsResource.query_unstructured","title":"query_unstructured  <code>async</code>","text":"<pre><code>query_unstructured(graph_id: str, query: str, return_answer: bool = True, include_chunks: bool = False) -&gt; Query\n</code></pre> <p>Query an unstructured graph.</p> <p>Parameters:</p> <ul> <li> <code>graph_id</code>               (<code>str</code>)           \u2013            <p>The ID of the graph.</p> </li> <li> <code>query</code>               (<code>str</code>)           \u2013            <p>The query.</p> </li> <li> <code>return_answer</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to return the answer.</p> </li> <li> <code>include_chunks</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to include chunks.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Query</code>           \u2013            <p>The query.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>If no queries are found in the response body.</p> </li> </ul>"},{"location":"api/#whyhow.resources.AsyncGraphsResource.update","title":"update  <code>async</code>","text":"<pre><code>update(graph_id: str, name: str | None = None, public: bool | None = None) -&gt; Graph\n</code></pre> <p>Update a graph.</p> <p>Parameters:</p> <ul> <li> <code>graph_id</code>               (<code>str</code>)           \u2013            <p>The ID of the graph.</p> </li> <li> <code>name</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The name of the graph.</p> </li> <li> <code>public</code>               (<code>bool</code>, default:                   <code>None</code> )           \u2013            <p>Whether the graph is public.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Graph</code>           \u2013            <p>The graph.</p> </li> </ul>"},{"location":"api/#whyhow.resources.AsyncSchemasResource","title":"AsyncSchemasResource","text":"<p>               Bases: <code>AsyncResource</code></p> <p>Async schemas resource.</p>"},{"location":"api/#whyhow.resources.AsyncSchemasResource.create","title":"create  <code>async</code>","text":"<pre><code>create(name: str, workspace_id: str, entities: list[SchemaEntity], relations: list[SchemaRelation], patterns: list[SchemaTriplePattern]) -&gt; Schema\n</code></pre> <p>Create a schema.</p> <p>Parameters:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The schema name.</p> </li> <li> <code>workspace_id</code>               (<code>str</code>)           \u2013            <p>The workspace ID.</p> </li> <li> <code>entities</code>               (<code>list[SchemaEntity]</code>)           \u2013            <p>The schema entities.</p> </li> <li> <code>relations</code>               (<code>list[SchemaRelation]</code>)           \u2013            <p>The schema relations.</p> </li> <li> <code>patterns</code>               (<code>list[TriplePattern]</code>)           \u2013            <p>The schema patterns.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Schema</code>           \u2013            <p>The schema.</p> </li> </ul>"},{"location":"api/#whyhow.resources.AsyncSchemasResource.delete","title":"delete  <code>async</code>","text":"<pre><code>delete(schema_id: str) -&gt; Schema\n</code></pre> <p>Delete a schema.</p> <p>Parameters:</p> <ul> <li> <code>schema_id</code>               (<code>str</code>)           \u2013            <p>The schema ID.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Schema</code>           \u2013            <p>The schema.</p> </li> </ul>"},{"location":"api/#whyhow.resources.AsyncSchemasResource.generate","title":"generate  <code>async</code>","text":"<pre><code>generate(questions: list[str]) -&gt; tuple[list[SchemaEntity], list[SchemaRelation], list[SchemaTriplePattern]]\n</code></pre> <p>Generate a schema.</p> <p>Parameters:</p> <ul> <li> <code>questions</code>               (<code>list[str]</code>)           \u2013            <p>The questions.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>entities</code> (              <code>list[SchemaEntity]</code> )          \u2013            <p>The schema entities.</p> </li> <li> <code>relations</code> (              <code>list[SchemaRelation]</code> )          \u2013            <p>The schema relations.</p> </li> <li> <code>patterns</code> (              <code>list[SchemaTriplePattern]</code> )          \u2013            <p>The schema patterns.</p> </li> </ul>"},{"location":"api/#whyhow.resources.AsyncSchemasResource.get","title":"get  <code>async</code>","text":"<pre><code>get(schema_id: str) -&gt; Schema\n</code></pre> <p>Get a schema.</p> <p>Parameters:</p> <ul> <li> <code>schema_id</code>               (<code>str</code>)           \u2013            <p>The schema ID.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Schema</code>           \u2013            <p>The schema.</p> </li> </ul>"},{"location":"api/#whyhow.resources.AsyncSchemasResource.get_all","title":"get_all  <code>async</code>","text":"<pre><code>get_all(limit: int = 10, workspace_id: str | None = None, workspace_name: str | None = None) -&gt; AsyncIterator[Schema]\n</code></pre> <p>Get all schemas.</p> <p>Parameters:</p> <ul> <li> <code>limit</code>               (<code>int</code>, default:                   <code>10</code> )           \u2013            <p>The maximum number of schemas to fetch in one request.</p> </li> <li> <code>workspace_id</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The workspace ID.</p> </li> <li> <code>workspace_name</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The workspace name.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>AsyncIterator[Schema]</code>           \u2013            <p>The schema iterator.</p> </li> </ul> <p>Yields:</p> <ul> <li> <code>Schema</code>           \u2013            <p>A schema.</p> </li> </ul>"},{"location":"api/#whyhow.resources.AsyncSchemasResource.load_json","title":"load_json  <code>staticmethod</code>","text":"<pre><code>load_json(file_path: str | Path) -&gt; tuple[list[SchemaEntity], list[SchemaRelation], list[SchemaTriplePattern]]\n</code></pre> <p>Load a JSON file containing a schema.</p> <p>Parameters:</p> <ul> <li> <code>file_path</code>               (<code>str | Path</code>)           \u2013            <p>The file path.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[SchemaEntity]</code>           \u2013            <p>The schema entities.</p> </li> <li> <code>list[SchemaRelation]</code>           \u2013            <p>The schema relations.</p> </li> <li> <code>list[SchemaTriplePattern]</code>           \u2013            <p>The schema patterns.</p> </li> </ul>"},{"location":"api/#whyhow.resources.AsyncWorkspacesResource","title":"AsyncWorkspacesResource","text":"<p>               Bases: <code>AsyncResource</code></p> <p>Workspaces resource.</p>"},{"location":"api/#whyhow.resources.AsyncWorkspacesResource.create","title":"create  <code>async</code>","text":"<pre><code>create(name: str) -&gt; Workspace\n</code></pre> <p>Create a workspace.</p> <p>Parameters:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The name of the workspace.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Workspace</code>           \u2013            <p>The created workspace.</p> </li> </ul>"},{"location":"api/#whyhow.resources.AsyncWorkspacesResource.delete","title":"delete  <code>async</code>","text":"<pre><code>delete(workspace_id: str) -&gt; Workspace\n</code></pre> <p>Delete a workspace.</p> <p>Parameters:</p> <ul> <li> <code>workspace_id</code>               (<code>str</code>)           \u2013            <p>The workspace ID.</p> </li> </ul>"},{"location":"api/#whyhow.resources.AsyncWorkspacesResource.get","title":"get  <code>async</code>","text":"<pre><code>get(workspace_id: str) -&gt; Workspace\n</code></pre> <p>Get a workspaces.</p> <p>Parameters:</p> <ul> <li> <code>workspace_id</code>               (<code>str</code>)           \u2013            <p>The workspace ID.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Workspace</code>           \u2013            <p>The workspace.</p> </li> </ul>"},{"location":"api/#whyhow.resources.AsyncWorkspacesResource.get_all","title":"get_all  <code>async</code>","text":"<pre><code>get_all(limit: int = 10, name: str | None = None) -&gt; AsyncIterator[Workspace]\n</code></pre> <p>Iterate over all workspaces.</p> <p>Parameters:</p> <ul> <li> <code>limit</code>               (<code>int</code>, default:                   <code>10</code> )           \u2013            <p>The maximum number of workspaces to fetch in each request.</p> </li> <li> <code>name</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The name of the workspace to filter by.</p> </li> </ul> <p>Yields:</p> <ul> <li> <code>Workspace</code>           \u2013            <p>A workspace.</p> </li> </ul>"},{"location":"api/#whyhow.resources.AsyncWorkspacesResource.update","title":"update  <code>async</code>","text":"<pre><code>update(workspace_id: str, name: str) -&gt; Workspace\n</code></pre> <p>Update a workspace.</p> <p>Parameters:</p> <ul> <li> <code>workspace_id</code>               (<code>str</code>)           \u2013            <p>The workspace ID.</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The new name for the workspace.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Workspace</code>           \u2013            <p>The updated workspace.</p> </li> </ul>"},{"location":"api/#whyhow.resources.ChunksResource","title":"ChunksResource","text":"<p>               Bases: <code>Resource</code></p> <p>Chunk resource.</p>"},{"location":"api/#whyhow.resources.ChunksResource.get","title":"get","text":"<pre><code>get(chunk_id: str, include_embeddings: bool | None = None) -&gt; Chunk\n</code></pre> <p>Get chunk by ID.</p> <p>Parameters:</p> <ul> <li> <code>chunk_id</code>               (<code>str</code>)           \u2013            <p>The ID of the chunk.</p> </li> <li> <code>include_embeddings</code>               (<code>bool</code>, default:                   <code>None</code> )           \u2013            <p>Whether to include embeddings.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Chunk</code>           \u2013            <p>The chunk.</p> </li> </ul>"},{"location":"api/#whyhow.resources.ChunksResource.get_all","title":"get_all","text":"<pre><code>get_all(limit: int = 10, workspace_id: str | None = None, workspace_name: str | None = None, document_id: str | None = None, document_filename: str | None = None, include_embeddings: bool | None = None) -&gt; Iterator[Chunk]\n</code></pre> <p>Get all chunks.</p> <p>Parameters:</p> <ul> <li> <code>limit</code>               (<code>int</code>, default:                   <code>10</code> )           \u2013            <p>The number of chunks to return.</p> </li> <li> <code>workspace_id</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The ID of the workspace.</p> </li> <li> <code>workspace_name</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The name of the workspace.</p> </li> <li> <code>document_id</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The ID of the document.</p> </li> <li> <code>document_filename</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The filename of the document.</p> </li> <li> <code>include_embeddings</code>               (<code>bool</code>, default:                   <code>None</code> )           \u2013            <p>Whether to include embeddings.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Iterator[Chunk]</code>           \u2013            <p>The chunk iterator.</p> </li> </ul> <p>Yields:</p> <ul> <li> <code>Chunk</code>           \u2013            <p>The chunk.</p> </li> </ul>"},{"location":"api/#whyhow.resources.DocumentsResource","title":"DocumentsResource","text":"<p>               Bases: <code>Resource</code></p> <p>Documents resource.</p>"},{"location":"api/#whyhow.resources.DocumentsResource.delete","title":"delete","text":"<pre><code>delete(document_id: str) -&gt; Document\n</code></pre> <p>Delete a document.</p> <p>Parameters:</p> <ul> <li> <code>document_id</code>               (<code>str</code>)           \u2013            <p>The document ID.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Document</code>           \u2013            <p>The document.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>If the document is deleted but not returned.</p> </li> </ul>"},{"location":"api/#whyhow.resources.DocumentsResource.get","title":"get","text":"<pre><code>get(document_id: str) -&gt; Document\n</code></pre> <p>Get documents.</p> <p>Parameters:</p> <ul> <li> <code>document_id</code>               (<code>str</code>)           \u2013            <p>The document ID.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Document</code>           \u2013            <p>The document.</p> </li> </ul>"},{"location":"api/#whyhow.resources.DocumentsResource.get_all","title":"get_all","text":"<pre><code>get_all(limit: int = 10, filename: str | None = None, workspace_id: str | None = None, workspace_name: str | None = None) -&gt; Iterator[Document]\n</code></pre> <p>Get all documents.</p> <p>Parameters:</p> <ul> <li> <code>limit</code>               (<code>int</code>, default:                   <code>10</code> )           \u2013            <p>The number of documents to return.</p> </li> <li> <code>filename</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The filename.</p> </li> <li> <code>workspace_id</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The workspace ID.</p> </li> <li> <code>workspace_name</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The workspace name.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Iterator[Document]</code>           \u2013            <p>The document iterator.</p> </li> </ul> <p>Yields:</p> <ul> <li> <code>Document</code>           \u2013            <p>The document.</p> </li> </ul>"},{"location":"api/#whyhow.resources.DocumentsResource.upload","title":"upload","text":"<pre><code>upload(path: str | Path, workspace_id: str, max_seconds: int = 60, sleep_seconds: float = 1.5) -&gt; Document\n</code></pre> <p>Upload a document.</p> <p>Parameters:</p> <ul> <li> <code>path</code>               (<code>Path</code>)           \u2013            <p>The path to the document.</p> </li> <li> <code>workspace_id</code>               (<code>str</code>)           \u2013            <p>The workspace ID.</p> </li> <li> <code>max_seconds</code>               (<code>int</code>, default:                   <code>60</code> )           \u2013            <p>The maximum number of seconds to wait for the document to be uploaded/processed.</p> </li> <li> <code>sleep_seconds</code>               (<code>float</code>, default:                   <code>1.5</code> )           \u2013            <p>The number of seconds to sleep between polling.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Document</code>           \u2013            <p>The document.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>FileNotFoundError</code>             \u2013            <p>If the file is not found.</p> </li> <li> <code>ValueError</code>             \u2013            <p>If the file format is not supported or the upload fails.</p> </li> </ul>"},{"location":"api/#whyhow.resources.GraphsResource","title":"GraphsResource","text":"<p>               Bases: <code>Resource</code></p> <p>Graph resources.</p>"},{"location":"api/#whyhow.resources.GraphsResource.create","title":"create","text":"<pre><code>create(name: str, workspace_id: str, schema_id: str, mode: CREATION_MODE = 'unstructured', document_ids: list[str] | None = None) -&gt; Graph\n</code></pre> <p>Create a graph.</p> <p>Parameters:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The name of the graph.</p> </li> <li> <code>workspace_id</code>               (<code>str</code>)           \u2013            <p>The ID of the workspace.</p> </li> <li> <code>schema_id</code>               (<code>str</code>)           \u2013            <p>The ID of the schema.</p> </li> <li> <code>mode</code>               (<code>Literal['unstructured', 'structured', 'mixed']</code>, default:                   <code>'unstructured'</code> )           \u2013            <p>The creation mode.</p> </li> <li> <code>document_ids</code>               (<code>list[str]</code>, default:                   <code>None</code> )           \u2013            <p>The IDs of the documents.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Graph</code>           \u2013            <p>The graph.</p> </li> </ul>"},{"location":"api/#whyhow.resources.GraphsResource.export_cypher","title":"export_cypher","text":"<pre><code>export_cypher(graph_id: str) -&gt; str\n</code></pre> <p>Export a graph to Cypher.</p> <p>Parameters:</p> <ul> <li> <code>graph_id</code>               (<code>str</code>)           \u2013            <p>The ID of the graph.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The Cypher text.</p> </li> </ul>"},{"location":"api/#whyhow.resources.GraphsResource.get","title":"get","text":"<pre><code>get(graph_id: str) -&gt; Graph\n</code></pre> <p>Get a graph by its ID.</p> <p>Parameters:</p> <ul> <li> <code>graph_id</code>               (<code>str</code>)           \u2013            <p>The ID of the graph.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Graph</code>           \u2013            <p>The graph.</p> </li> </ul>"},{"location":"api/#whyhow.resources.GraphsResource.get_all","title":"get_all","text":"<pre><code>get_all(limit: int = 10, name: str | None = None, workspace_id: str | None = None, workspace_name: str | None = None, schema_id: str | None = None, schema_name: str | None = None) -&gt; Iterator[Graph]\n</code></pre> <p>Get all graphs.</p> <p>Parameters:</p> <ul> <li> <code>limit</code>               (<code>int</code>, default:                   <code>10</code> )           \u2013            <p>The number of graphs to return.</p> </li> <li> <code>name</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The name of the graph.</p> </li> <li> <code>workspace_id</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The ID of the workspace.</p> </li> <li> <code>workspace_name</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The name of the workspace.</p> </li> <li> <code>schema_id</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The ID of the schema.</p> </li> <li> <code>schema_name</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The name of the schema.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Iterator[Graph]</code>           \u2013            <p>The graph iterator.</p> </li> </ul> <p>Yields:</p> <ul> <li> <code>Graph</code>           \u2013            <p>The graph.</p> </li> </ul>"},{"location":"api/#whyhow.resources.GraphsResource.get_all_triples","title":"get_all_triples","text":"<pre><code>get_all_triples(graph_id: str, limit: int = 10) -&gt; Iterator[Triple]\n</code></pre> <p>Get all triples.</p> <p>Parameters:</p> <ul> <li> <code>graph_id</code>               (<code>str</code>)           \u2013            <p>The ID of the graph.</p> </li> <li> <code>limit</code>               (<code>int</code>, default:                   <code>10</code> )           \u2013            <p>The number of triples to return.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Iterator[Triple]</code>           \u2013            <p>The triple iterator.</p> </li> </ul> <p>Yields:</p> <ul> <li> <code>Triple</code>           \u2013            <p>The triple.</p> </li> </ul>"},{"location":"api/#whyhow.resources.GraphsResource.query_structured","title":"query_structured","text":"<pre><code>query_structured(graph_id: str, entities: list[str] | None = None, relations: list[str] | None = None, values: list[str] | None = None) -&gt; Query\n</code></pre> <p>Structured query.</p>"},{"location":"api/#whyhow.resources.GraphsResource.query_unstructured","title":"query_unstructured","text":"<pre><code>query_unstructured(graph_id: str, query: str, return_answer: bool = True, include_chunks: bool = False) -&gt; Query\n</code></pre> <p>Unstructured query.</p> <p>Parameters:</p> <ul> <li> <code>graph_id</code>               (<code>str</code>)           \u2013            <p>The ID of the graph.</p> </li> <li> <code>query</code>               (<code>str</code>)           \u2013            <p>The query.</p> </li> <li> <code>return_answer</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to return the answer.</p> </li> <li> <code>include_chunks</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to include chunks.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Query</code>           \u2013            <p>The query.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>If no queries are found in the response body.</p> </li> </ul>"},{"location":"api/#whyhow.resources.GraphsResource.update","title":"update","text":"<pre><code>update(graph_id: str, name: str | None = None, public: bool | None = None) -&gt; Graph\n</code></pre> <p>Update a graph.</p> <p>Parameters:</p> <ul> <li> <code>graph_id</code>               (<code>str</code>)           \u2013            <p>The ID of the graph.</p> </li> <li> <code>name</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The name of the graph.</p> </li> <li> <code>public</code>               (<code>bool</code>, default:                   <code>None</code> )           \u2013            <p>Whether the graph is public.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Graph</code>           \u2013            <p>The graph.</p> </li> </ul>"},{"location":"api/#whyhow.resources.SchemasResource","title":"SchemasResource","text":"<p>               Bases: <code>Resource</code></p> <p>Schemas resource.</p>"},{"location":"api/#whyhow.resources.SchemasResource.create","title":"create","text":"<pre><code>create(name: str, workspace_id: str, entities: list[SchemaEntity], relations: list[SchemaRelation], patterns: list[SchemaTriplePattern]) -&gt; Schema\n</code></pre> <p>Create a schema.</p> <p>Parameters:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The schema name.</p> </li> <li> <code>workspace_id</code>               (<code>str</code>)           \u2013            <p>The workspace ID.</p> </li> <li> <code>entities</code>               (<code>list[SchemaEntity]</code>)           \u2013            <p>The schema entities.</p> </li> <li> <code>relations</code>               (<code>list[SchemaRelation]</code>)           \u2013            <p>The schema relations.</p> </li> <li> <code>patterns</code>               (<code>list[TriplePattern]</code>)           \u2013            <p>The schema patterns.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Schema</code>           \u2013            <p>The schema.</p> </li> </ul>"},{"location":"api/#whyhow.resources.SchemasResource.delete","title":"delete","text":"<pre><code>delete(schema_id: str) -&gt; Schema\n</code></pre> <p>Delete a schema.</p> <p>Parameters:</p> <ul> <li> <code>schema_id</code>               (<code>str</code>)           \u2013            <p>The schema ID.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Schema</code>           \u2013            <p>The schema.</p> </li> </ul>"},{"location":"api/#whyhow.resources.SchemasResource.generate","title":"generate","text":"<pre><code>generate(questions: list[str]) -&gt; tuple[list[SchemaEntity], list[SchemaRelation], list[SchemaTriplePattern]]\n</code></pre> <p>Generate a schema.</p> <p>Parameters:</p> <ul> <li> <code>questions</code>               (<code>list[str]</code>)           \u2013            <p>The questions.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>entities</code> (              <code>list[SchemaEntity]</code> )          \u2013            <p>The schema entities.</p> </li> <li> <code>relations</code> (              <code>list[SchemaRelation]</code> )          \u2013            <p>The schema relations.</p> </li> <li> <code>patterns</code> (              <code>list[SchemaTriplePattern]</code> )          \u2013            <p>The schema patterns.</p> </li> </ul>"},{"location":"api/#whyhow.resources.SchemasResource.get","title":"get","text":"<pre><code>get(schema_id: str) -&gt; Schema\n</code></pre> <p>Get a schema.</p> <p>Parameters:</p> <ul> <li> <code>schema_id</code>               (<code>str</code>)           \u2013            <p>The schema ID.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Schema</code>           \u2013            <p>The schema.</p> </li> </ul>"},{"location":"api/#whyhow.resources.SchemasResource.get_all","title":"get_all","text":"<pre><code>get_all(limit: int = 10, workspace_id: str | None = None, workspace_name: str | None = None) -&gt; Iterator[Schema]\n</code></pre> <p>Get all schemas.</p> <p>Parameters:</p> <ul> <li> <code>limit</code>               (<code>int</code>, default:                   <code>10</code> )           \u2013            <p>The maximum number of schemas to fetch in one request.</p> </li> <li> <code>workspace_id</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The workspace ID.</p> </li> <li> <code>workspace_name</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The workspace name.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Iterator[Schema]</code>           \u2013            <p>The schema iterator.</p> </li> </ul> <p>Yields:</p> <ul> <li> <code>Schema</code>           \u2013            <p>A schema.</p> </li> </ul>"},{"location":"api/#whyhow.resources.SchemasResource.load_json","title":"load_json  <code>staticmethod</code>","text":"<pre><code>load_json(file_path: str | Path) -&gt; tuple[list[SchemaEntity], list[SchemaRelation], list[SchemaTriplePattern]]\n</code></pre> <p>Load a JSON file containing a schema.</p> <p>Parameters:</p> <ul> <li> <code>file_path</code>               (<code>str | Path</code>)           \u2013            <p>The file path.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[SchemaEntity]</code>           \u2013            <p>The schema entities.</p> </li> <li> <code>list[SchemaRelation]</code>           \u2013            <p>The schema relations.</p> </li> <li> <code>list[SchemaTriplePattern]</code>           \u2013            <p>The schema patterns.</p> </li> </ul>"},{"location":"api/#whyhow.resources.WorkspacesResource","title":"WorkspacesResource","text":"<p>               Bases: <code>Resource</code></p> <p>Workspaces resource.</p>"},{"location":"api/#whyhow.resources.WorkspacesResource.create","title":"create","text":"<pre><code>create(name: str) -&gt; Workspace\n</code></pre> <p>Create a workspace.</p> <p>Parameters:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The name of the workspace.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Workspace</code>           \u2013            <p>The created workspace.</p> </li> </ul>"},{"location":"api/#whyhow.resources.WorkspacesResource.delete","title":"delete","text":"<pre><code>delete(workspace_id: str) -&gt; Workspace\n</code></pre> <p>Delete a workspace.</p> <p>Parameters:</p> <ul> <li> <code>workspace_id</code>               (<code>str</code>)           \u2013            <p>The workspace ID.</p> </li> </ul>"},{"location":"api/#whyhow.resources.WorkspacesResource.get","title":"get","text":"<pre><code>get(workspace_id: str) -&gt; Workspace\n</code></pre> <p>Get a workspaces.</p> <p>Parameters:</p> <ul> <li> <code>workspace_id</code>               (<code>str</code>)           \u2013            <p>The workspace ID.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Workspace</code>           \u2013            <p>The workspace.</p> </li> </ul>"},{"location":"api/#whyhow.resources.WorkspacesResource.get_all","title":"get_all","text":"<pre><code>get_all(limit: int = 10, name: str | None = None) -&gt; Iterator[Workspace]\n</code></pre> <p>Iterate over all workspaces.</p> <p>Parameters:</p> <ul> <li> <code>limit</code>               (<code>int</code>, default:                   <code>10</code> )           \u2013            <p>The maximum number of workspaces to fetch in each request.</p> </li> <li> <code>name</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The name of the workspace to filter by.</p> </li> </ul> <p>Yields:</p> <ul> <li> <code>Workspace</code>           \u2013            <p>A workspace.</p> </li> </ul>"},{"location":"api/#whyhow.resources.WorkspacesResource.update","title":"update","text":"<pre><code>update(workspace_id: str, name: str) -&gt; Workspace\n</code></pre> <p>Update a workspace.</p> <p>Parameters:</p> <ul> <li> <code>workspace_id</code>               (<code>str</code>)           \u2013            <p>The workspace ID.</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The new name for the workspace.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Workspace</code>           \u2013            <p>The updated workspace.</p> </li> </ul>"},{"location":"api/#whyhow.schemas","title":"schemas","text":"<p>User facing pyndantic models.</p>"},{"location":"api/#whyhow.schemas.Chunk","title":"Chunk","text":"<p>               Bases: <code>BaseModel</code></p> <p>Chunk model.</p> <p>Attributes:</p> <ul> <li> <code>chunk_id</code>               (<code>str</code>)           \u2013            <p>The chunk ID.</p> </li> <li> <code>created_at</code>               (<code>datetime | None</code>)           \u2013            <p>The creation datetime.</p> </li> <li> <code>updated_at</code>               (<code>datetime | None</code>)           \u2013            <p>The update datetime.</p> </li> <li> <code>document_id</code>               (<code>str | None</code>)           \u2013            <p>The document ID.</p> </li> <li> <code>workspace_ids</code>               (<code>list[str]</code>)           \u2013            <p>The workspace IDs.</p> </li> <li> <code>metadata</code>               (<code>ChunkMetadata</code>)           \u2013            <p>The chunk metadata.</p> </li> <li> <code>content</code>               (<code>str | dict[str, Any]</code>)           \u2013            <p>The chunk content.</p> </li> <li> <code>embedding</code>               (<code>list[float] | None</code>)           \u2013            <p>The chunk embedding.</p> </li> <li> <code>tags</code>               (<code>dict[str, Any] | list[Any]</code>)           \u2013            <p>The chunk tags.</p> </li> <li> <code>user_metadata</code>               (<code>dict[str, Any]</code>)           \u2013            <p>The chunk user metadata.</p> </li> </ul>"},{"location":"api/#whyhow.schemas.ChunkMetadata","title":"ChunkMetadata","text":"<p>               Bases: <code>BaseModel</code></p> <p>Chunk metadata model.</p> <p>Attributes:</p> <ul> <li> <code>language</code>               (<code>(str, optional)</code>)           \u2013            <p>The chunk language.</p> </li> <li> <code>length</code>               (<code>(int, optional)</code>)           \u2013            <p>The chunk length.</p> </li> <li> <code>size</code>               (<code>(int, optional)</code>)           \u2013            <p>The chunk size.</p> </li> <li> <code>data_source_type</code>               (<code>(str, optional)</code>)           \u2013            <p>The chunk data source type.</p> </li> <li> <code>index</code>               (<code>(int, optional)</code>)           \u2013            <p>The chunk index.</p> </li> <li> <code>page</code>               (<code>(int, optional)</code>)           \u2013            <p>The chunk page.</p> </li> <li> <code>start</code>               (<code>(int, optional)</code>)           \u2013            <p>The chunk start.</p> </li> <li> <code>end</code>               (<code>(int, optional)</code>)           \u2013            <p>The chunk end.</p> </li> </ul>"},{"location":"api/#whyhow.schemas.Document","title":"Document","text":"<p>               Bases: <code>BaseModel</code></p> <p>Document model.</p> <p>Attributes:</p> <ul> <li> <code>document_id</code>               (<code>str</code>)           \u2013            <p>The document ID.</p> </li> <li> <code>created_at</code>               (<code>(datetime, optional)</code>)           \u2013            <p>The creation datetime.</p> </li> <li> <code>updated_at</code>               (<code>(datetime, optional)</code>)           \u2013            <p>The update datetime.</p> </li> <li> <code>workspace_ids</code>               (<code>list[str]</code>)           \u2013            <p>The workspace IDs.</p> </li> <li> <code>metadata</code>               (<code>DocumentMetadata</code>)           \u2013            <p>The document metadata.</p> </li> <li> <code>status</code>               (<code>str</code>)           \u2013            <p>The document status.</p> </li> <li> <code>tags</code>               (<code>(dict[str, Any], optional)</code>)           \u2013            <p>The document tags.</p> </li> <li> <code>user_metadata</code>               (<code>(dict[str, Any], optional)</code>)           \u2013            <p>The document user metadata.</p> </li> </ul>"},{"location":"api/#whyhow.schemas.DocumentMetadata","title":"DocumentMetadata","text":"<p>               Bases: <code>BaseModel</code></p> <p>Document metadata model.</p> <p>Attributes:</p> <ul> <li> <code>size</code>               (<code>int</code>)           \u2013            <p>The document size.</p> </li> <li> <code>format</code>               (<code>str</code>)           \u2013            <p>The document format.</p> </li> <li> <code>filename</code>               (<code>str</code>)           \u2013            <p>The document filename.</p> </li> </ul>"},{"location":"api/#whyhow.schemas.Graph","title":"Graph","text":"<p>               Bases: <code>BaseModel</code></p> <p>Graph model.</p> <p>Attributes:</p> <ul> <li> <code>graph_id</code>               (<code>str</code>)           \u2013            <p>The graph ID.</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The graph name.</p> </li> <li> <code>workspace_id</code>               (<code>str</code>)           \u2013            <p>The workspace ID.</p> </li> <li> <code>created_at</code>               (<code>(datetime, optional)</code>)           \u2013            <p>The creation datetime.</p> </li> <li> <code>updated_at</code>               (<code>(datetime, optional)</code>)           \u2013            <p>The update datetime.</p> </li> <li> <code>schema_id</code>               (<code>(str, optional)</code>)           \u2013            <p>The schema ID.</p> </li> <li> <code>status</code>               (<code>str</code>)           \u2013            <p>The graph status.</p> </li> <li> <code>errors</code>               (<code>(list[GraphErrorDetails], optional)</code>)           \u2013            <p>The graph errors.</p> </li> <li> <code>public</code>               (<code>(bool, optional)</code>)           \u2013            <p>The graph public status.</p> </li> </ul>"},{"location":"api/#whyhow.schemas.GraphErrorDetails","title":"GraphErrorDetails","text":"<p>               Bases: <code>BaseModel</code></p> <p>Graph error details model.</p> <p>Attributes:</p> <ul> <li> <code>message</code>               (<code>str</code>)           \u2013            <p>The error message.</p> </li> <li> <code>created_at</code>               (<code>(datetime, optional)</code>)           \u2013            <p>The creation datetime.</p> </li> <li> <code>level</code>               (<code>str</code>)           \u2013            <p>The error level.</p> </li> </ul>"},{"location":"api/#whyhow.schemas.Node","title":"Node","text":"<p>               Bases: <code>BaseModel</code></p> <p>Node model.</p> <p>Attributes:</p> <ul> <li> <code>node_id</code>               (<code>str</code>)           \u2013            <p>The node ID.</p> </li> <li> <code>label</code>               (<code>str</code>)           \u2013            <p>The node label.</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The node name.</p> </li> <li> <code>chunk_ids</code>               (<code>list[str]</code>)           \u2013            <p>The chunk IDs.</p> </li> <li> <code>properties</code>               (<code>(dict[str, Any], optional)</code>)           \u2013            <p>The node properties.</p> </li> <li> <code>created_at</code>               (<code>(datetime, optional)</code>)           \u2013            <p>The creation datetime.</p> </li> <li> <code>updated_at</code>               (<code>(datetime, optional)</code>)           \u2013            <p>The update datetime.</p> </li> </ul>"},{"location":"api/#whyhow.schemas.Query","title":"Query","text":"<p>               Bases: <code>BaseModel</code></p> <p>Query model.</p> <p>Attributes:</p> <ul> <li> <code>query_id</code>               (<code>str</code>)           \u2013            <p>The query ID.</p> </li> <li> <code>graph_id</code>               (<code>str</code>)           \u2013            <p>The graph ID.</p> </li> <li> <code>answer</code>               (<code>(str, optional)</code>)           \u2013            <p>The query answer.</p> </li> <li> <code>status</code>               (<code>str</code>)           \u2013            <p>The query status.</p> </li> <li> <code>nodes</code>               (<code>list[Node]</code>)           \u2013            <p>The query nodes.</p> </li> <li> <code>triples</code>               (<code>list[Triple]</code>)           \u2013            <p>The query triples.</p> </li> <li> <code>created_at</code>               (<code>(datetime, optional)</code>)           \u2013            <p>The creation datetime.</p> </li> <li> <code>updated_at</code>               (<code>(datetime, optional)</code>)           \u2013            <p>The update datetime.</p> </li> </ul>"},{"location":"api/#whyhow.schemas.Relation","title":"Relation","text":"<p>               Bases: <code>BaseModel</code></p> <p>Relation model.</p> <p>Attributes:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The relation name.</p> </li> <li> <code>properties</code>               (<code>(dict[str, Any], optional)</code>)           \u2013            <p>The relation properties.</p> </li> </ul>"},{"location":"api/#whyhow.schemas.Schema","title":"Schema","text":"<p>               Bases: <code>BaseModel</code></p> <p>Schema model.</p> <p>Attributes:</p> <ul> <li> <code>schema_id</code>               (<code>str</code>)           \u2013            <p>The schema ID.</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The schema name.</p> </li> <li> <code>entities</code>               (<code>list[SchemaEntity]</code>)           \u2013            <p>The schema entities.</p> </li> <li> <code>relations</code>               (<code>list[SchemaRelation]</code>)           \u2013            <p>The schema relations.</p> </li> <li> <code>patterns</code>               (<code>list[SchemaTriplePattern]</code>)           \u2013            <p>The schema patterns.</p> </li> <li> <code>workspace_id</code>               (<code>str</code>)           \u2013            <p>The workspace ID.</p> </li> <li> <code>created_at</code>               (<code>(datetime, optional)</code>)           \u2013            <p>The creation datetime.</p> </li> <li> <code>updated_at</code>               (<code>(datetime, optional)</code>)           \u2013            <p>The update datetime.</p> </li> </ul>"},{"location":"api/#whyhow.schemas.SchemaEntity","title":"SchemaEntity","text":"<p>               Bases: <code>BaseModel</code></p> <p>Entity model.</p> <p>Attributes:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The entity name.</p> </li> <li> <code>description</code>               (<code>(str, optional)</code>)           \u2013            <p>The entity description.</p> </li> <li> <code>fields</code>               (<code>(list[SchemaEntityField], optional)</code>)           \u2013            <p>The entity fields.</p> </li> </ul>"},{"location":"api/#whyhow.schemas.SchemaEntityField","title":"SchemaEntityField","text":"<p>               Bases: <code>BaseModel</code></p> <p>Entity field model.</p> <p>Attributes:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The field name.</p> </li> <li> <code>properties</code>               (<code>(list[str], optional)</code>)           \u2013            <p>The field properties.</p> </li> </ul>"},{"location":"api/#whyhow.schemas.SchemaRelation","title":"SchemaRelation","text":"<p>               Bases: <code>BaseModel</code></p> <p>Relation model.</p> <p>Attributes:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The relation name.</p> </li> <li> <code>description</code>               (<code>(str, optional)</code>)           \u2013            <p>The relation description.</p> </li> </ul>"},{"location":"api/#whyhow.schemas.SchemaTriplePattern","title":"SchemaTriplePattern","text":"<p>               Bases: <code>BaseModel</code></p> <p>Triple pattern model.</p> <p>Attributes:</p> <ul> <li> <code>head</code>               (<code>SchemaEntity</code>)           \u2013            <p>The head entity.</p> </li> <li> <code>relation</code>               (<code>SchemaRelation</code>)           \u2013            <p>The relation.</p> </li> <li> <code>tail</code>               (<code>SchemaEntity</code>)           \u2013            <p>The tail entity.</p> </li> <li> <code>description</code>               (<code>str</code>)           \u2013            <p>The triple description.</p> </li> </ul>"},{"location":"api/#whyhow.schemas.Triple","title":"Triple","text":"<p>               Bases: <code>BaseModel</code></p> <p>Triple model.</p> <p>Attributes:</p> <ul> <li> <code>triple_id</code>               (<code>str</code>)           \u2013            <p>The triple ID.</p> </li> <li> <code>head</code>               (<code>Node</code>)           \u2013            <p>The head node.</p> </li> <li> <code>tail</code>               (<code>Node</code>)           \u2013            <p>The tail node.</p> </li> <li> <code>relation</code>               (<code>Relation</code>)           \u2013            <p>The relation.</p> </li> <li> <code>chunk_ids</code>               (<code>(list[str], optional)</code>)           \u2013            <p>The chunk IDs.</p> </li> <li> <code>created_at</code>               (<code>(datetime, optional)</code>)           \u2013            <p>The creation datetime.</p> </li> <li> <code>updated_at</code>               (<code>(datetime, optional)</code>)           \u2013            <p>The update datetime.</p> </li> </ul>"},{"location":"api/#whyhow.schemas.Workspace","title":"Workspace","text":"<p>               Bases: <code>BaseModel</code></p> <p>Workspace model.</p> <p>Attributes:</p> <ul> <li> <code>workspace_id</code>               (<code>str</code>)           \u2013            <p>The workspace ID.</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The workspace name.</p> </li> <li> <code>created_at</code>               (<code>(datetime, optional)</code>)           \u2013            <p>The creation datetime.</p> </li> <li> <code>updated_at</code>               (<code>(datetime, optional)</code>)           \u2013            <p>The update datetime.</p> </li> </ul>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.10 or higher</li> <li>WhyHow API key</li> </ul>"},{"location":"installation/#install-from-pypi","title":"Install from PyPI","text":"<p>You can install the SDK directly from PyPI using pip:</p> <pre><code>pip install whyhow\n</code></pre>"},{"location":"installation/#install-from-github","title":"Install from Github","text":"<p>Alternatively, you can clone the repo and install the package</p> <pre><code>git clone git@github.com:whyhow-ai/whyhow.git\ncd whyhow\npip install .\n</code></pre>"},{"location":"installation/#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter any issues during installation, please check the following:</p> <ul> <li>Ensure that you have Python 3.10 or higher installed. You can check your Python version by running <code>python --version</code> in your terminal.</li> <li>If you are installing from GitHub, ensure that you have cloned the repository correctly and are in the right directory.</li> <li>If you are using a virtual environment, make sure that it is activated before running the installation commands.</li> <li>If you still face problems, please open an issue on the GitHub repository with detailed information about the error and your environment setup.</li> </ul>"},{"location":"tutorial/","title":"Tutorial","text":"<p>This tutorial will guide you through building and querying a knowledge graph using Amazon.com Inc.'s 2024 10-K filing and the provided schema. We'll use the WhyHow SDK to import relevant information from the 10-K document into a knowledge graph and then query it for insights related to Amazon's business.</p>"},{"location":"tutorial/#environment-setup","title":"Environment Setup","text":"<p>Ensure you have Python 3.10 or higher installed on your machine.</p> <p>To get started while we\u2019re in Beta, you\u2019ll need to get a Beta Access Key. You can do so by scheduling a call with us.</p> <p>If you already have access to our Platform Beta, you can retrieve your API keys in the Settings page of https://app.whyhow.ai/ or from email communication when you registered. </p> <p>After signing up, to get your API key, you can find it in the WhyHow settings page. To keep your API key secure, set it as an environment variable. Open your terminal and run the following command, substituting the placeholder with your actual data:</p> <pre><code>export WHYHOW_API_KEY=&lt;YOUR_WHYHOW_API_KEY&gt;\n</code></pre>"},{"location":"tutorial/#install-whyhow-sdk","title":"Install WhyHow SDK","text":"<p>If you haven't already, install the <code>WhyHow SDK</code> using pip:</p> <pre><code>pip install whyhow\n</code></pre>"},{"location":"tutorial/#configure-the-whyhow-client","title":"Configure the WhyHow Client","text":"<p>With your environment variable set, you can now configure the <code>WhyHow</code> client in your Python script. The client will automatically read in your environment variable, or you can override this value by specifying it in the client constructor.</p> <pre><code>from whyhow import WhyHow\n\nclient = WhyHow(api_key=&lt;your WhyHow API key&gt;, base_url=\"https://api.whyhow.ai\")\n</code></pre>"},{"location":"tutorial/#create-the-knowledge-graph-from-a-schema","title":"Create the Knowledge Graph from a schema","text":"<p>First, let's define the workspace for our project and specify the path to Amazon's 10-K document. Your workspace is a logical grouping of the raw data you upload, the schema you define, and the graphs you create.</p> <pre><code>workspace = client.workspaces.create(name=\"Amazon 10-K Analysis\")\ndocument_path = \"path/to/amazon_10k_2024.pdf\"\n\n# Add document to your workspace\ndocument = client.documents.upload(\n    document_path,\n    workspace_id=workspace.workspace_id\n)\nprint(\"Document Added:\", document)\n</code></pre> <p>Next, we'll create a schema based on the provided JSON file. This schema defines the entities, relationships, and patterns we'll use to construct the graph.</p> <pre><code>import json\nfrom whyhow import SchemaEntity, SchemaRelation, SchemaTriplePattern\n\n# Load the schema from the JSON file\nentities, relations, patterns = client.schemas.load_json(\"amazon_10k_schema.json\")\n\nschema = client.schemas.create(\n    workspace_id=workspace.workspace_id,\n    name=\"Amazon 10-K Schema\",\n    entities=entities,\n    relations=relations,\n    patterns=patterns,\n)\n</code></pre> <p>Now, let's create the graph using the schema and the uploaded 10-K document:</p> <pre><code># Create graph from schema and document\ngraph = client.graphs.create(\n    workspace_id=workspace.workspace_id,\n    schema_id=schema.schema_id,\n    name=\"Amazon 10-K Graph\",\n)\n# Creating your graph\n</code></pre>"},{"location":"tutorial/#option-2-create-the-knowledge-graph-from-seed-questions","title":"Option 2 - Create the Knowledge Graph from seed questions","text":"<p>Alternatively, you can create a graph using seed concepts in the form of questions written in natural language. We'll create a new workspace and upload the same data.</p> <pre><code>workspace = client.workspaces.create(name=\"Amazon 10-K Analysis (Auto-Generated)\")\ndocument_path = \"path/to/amazon_10k_2024.pdf\"\n\n# Add document to your workspace\ndocument = client.documents.upload(\n    document_path,\n    workspace_id=workspace.workspace_id\n)\nprint(\"Document Added:\", document)\n</code></pre> <p>Create the schema from the seed questions:</p> <pre><code>questions = [\n    \"What are Amazon's primary business segments?\",\n    \"How does Amazon generate revenue?\",\n    \"What are the key risk factors for Amazon's business?\",\n    \"Who are Amazon's main competitors?\",\n    \"What is Amazon's strategy for future growth?\"\n]\n\nentities, relations, patterns = client.schemas.generate(\n    questions=questions,\n)\nprint(\"Entities:\", entities)\nprint(\"Relations:\", relations)\nprint(\"Patterns:\", patterns)\n\nschema = client.schemas.create(\n    workspace_id=workspace.workspace_id,\n    name=\"Amazon 10-K Auto-Generated Schema\",\n    entities=entities,\n    relations=relations,\n    patterns=patterns,\n)\n\n# Create graph from schema and document\ngraph_auto = client.graphs.create(\n    workspace_id=workspace.workspace_id,\n    schema_id=schema.schema_id,\n    name=\"Amazon 10-K Auto-Generated Graph\",\n)\n# Creating your graph\n</code></pre> <p>Now you can query the auto-generated graph:</p> <pre><code># Query the auto-generated graph\nquestion = \"What are Amazon's main revenue streams?\"\nquery = client.graphs.query_unstructured(\n    graph_id=graph_auto.graph_id,\n    query=question,\n)\nprint(\"Query Response:\", query.answer)\n\n# Query for specific competitive advantages\nquestion = \"What are Amazon's key competitive advantages?\"\nquery = client.graphs.query_unstructured(\n    graph_id=graph_auto.graph_id,\n    query=question,\n)\nprint(\"Query Response:\", query.answer)\n</code></pre> <p>This approach allows you to create a knowledge graph based on specific questions you're interested in exploring from the Amazon 10-K document. The auto-generated schema will focus on entities and relationships relevant to these questions, potentially providing a more targeted analysis of the document.</p>"},{"location":"tutorial/#querying-the-knowledge-graph","title":"Querying the Knowledge Graph","text":"<p>With the graph created, we can now query it to find specific information about Amazon's business:</p> <pre><code># Query graph for Amazon's business segments\nquestion = \"What are Amazon's main business segments?\"\nquery = client.graphs.query_unstructured(\n    graph_id=graph.graph_id,\n    query=question,\n)\nprint(\"Query Response:\", query.answer)\n\n# Query graph for Amazon's revenue streams\nquestion = \"What are Amazon's primary revenue streams?\"\nquery = client.graphs.query_unstructured(\n    graph_id=graph.graph_id,\n    query=question,\n)\nprint(\"Query Response:\", query.answer)\n\n# Include the chunks in the query\nquestion = \"What are the key risk factors for Amazon's business?\"\nquery = client.graphs.query_unstructured(\n    graph_id=graph.graph_id,\n    query=question,\n    include_chunks=True,\n)\nprint(\"Query Response:\", query.answer)\n\n# Query the graph for specific relations\nrelations = [\"comprises\", \"contributes_to\"]\n\nquery = client.graphs.query_structured(\n    graph_id=graph.graph_id,\n    relations=relations,\n)\nprint(\"Query Response:\", query.triples)\n</code></pre>"},{"location":"tutorial/#after-querying-the-graph-lets-retrieve-all-triples","title":"After querying the graph, let's retrieve all triples","text":"<pre><code>print(\"Retrieving all triples from the graph:\")\nall_triples = client.graphs.get_all_triples(graph_id=graph.graph_id, limit=100)\n\nfor triple in all_triples:\n    print(f\"Subject: {triple.head}, Relation: {triple.relation}, Object: {triple.tail}\") \n</code></pre>"},{"location":"tutorial/#create-graph-from-triples","title":"Create Graph from Triples","text":"<pre><code># Let's say we want to create a new graph focusing on Amazon's revenue streams\nrevenue_triples = [\n    triple for triple in all_triples \n    if \"revenue\" in triple.head.lower() or \"revenue\" in triple.tail.lower()\n]\n\n# Create a new graph from these revenue-related triples\nrevenue_graph = client.graphs.create_graph_from_triples(\n    workspace_id=workspace.workspace_id,\n    triples=revenue_triples,\n    name=\"Amazon Revenue Streams Graph\",\n    description=\"A focused graph on Amazon's various revenue streams extracted from the 10-K\"\n)\n\nprint(f\"Created new graph: {revenue_graph.name}\")\n\n# Now we can query this new, more focused graph\nquestion = \"What are Amazon's main sources of revenue?\"\nquery = client.graphs.query_unstructured(\n    graph_id=revenue_graph.graph_id,\n    query=question,\n)\nprint(\"Query Response:\", query.answer)\n\n# We can also get all triples from this new graph\nrevenue_graph_triples = client.graphs.get_all_triples(graph_id=revenue_graph.graph_id, limit=50)\n\nprint(\"Triples in the Revenue Streams Graph:\")\nfor triple in revenue_graph_triples:\n    print(f\"Subject: {triple.head.name}, Relation: {triple.relation.name}, Object: {triple.tail.name}\")\n</code></pre>"},{"location":"tutorial/#exporting-the-knowledge-graph","title":"Exporting the Knowledge Graph","text":"<p>You can export the graph as a Cypher query to use in Neo4j or other graph databases:</p> <pre><code>cypher = client.graphs.export_cypher(graph_id=graph.graph_id)\nprint(cypher)\n</code></pre> <p>This tutorial demonstrates how to create a knowledge graph from Amazon's 10-K filing using the provided schema, and how to query the graph for insights into Amazon's business structure, revenue streams, and risk factors. You can expand on this by adding more specific queries or by analyzing different aspects of the 10-K document as needed for your analysis.</p>"}]}