{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the WhyHow Automated Knowledge Graph Creation SDK Documentation","text":"<p>The WhyHow Knowledge Graph Creation SDK enables you to quickly and easily build automated knowledge graphs tailored to your unique worldview. Instantly build, extend, and query well-scoped KGs using a raw PDF or CSV and simple seed concepts in natural language.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Instantaneously create knowledge graphs using your documents and seed concepts (currently supports PDF and CSV files)</li> <li>Simple API for querying your knowledge graphs using natural language</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<ol> <li>Install the package by following the Installation Guide</li> <li>Initialize the SDK client with your WhyHow API key</li> <li>Create a workspace and add raw documents using <code>client.documents.upload()</code></li> <li>Create a graph for the workspace using <code>client.graphs.create()</code> using a list of seed concepts</li> <li>Query the graph with natural language using <code>client.graphs.query_unstructured()</code></li> </ol> <p>For a detailed walkthrough and code examples, check out the Tutorial.</p>"},{"location":"api/","title":"API Reference","text":"<p>This document provides a reference for the WhyHow API.</p> <p>::: whyhow.client</p> <p>::: whyhow.resources</p> <p>::: whyhow.schemas</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.10 or higher</li> <li>WhyHow API key</li> </ul>"},{"location":"installation/#install-from-pypi","title":"Install from PyPI","text":"<p>You can install the SDK directly from PyPI using pip:</p> <pre><code>pip install whyhow\n</code></pre>"},{"location":"installation/#install-from-github","title":"Install from Github","text":"<p>Alternatively, you can clone the repo and install the package</p> <pre><code>\ngit clone git@github.com:whyhow-ai/whyhow.git\ncd whyhow\npip install .\n</code></pre>"},{"location":"installation/#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter any issues during installation, please check the following:</p> <ul> <li>Ensure that you have Python 3.10 or higher installed. You can check your Python version by running <code>python --version</code> in your terminal.</li> <li>If you are installing from GitHub, ensure that you have cloned the repository correctly and are in the right directory.</li> <li>If you are using a virtual environment, make sure that it is activated before running the installation commands.</li> <li>If you still face problems, please open an issue on the GitHub repository with detailed information about the error and your environment setup.</li> </ul>"},{"location":"tutorial/","title":"Tutorial","text":"<p>This is a straightforward tutorial on how to build and query a knowledge graph using PDF texts of Harry Potter books using WhyHow SDK. This example will guide you through importing documents from the Harry Potter series into the knowledge graph, then querying it for insights related to the series.</p>"},{"location":"tutorial/#environment-setup","title":"Environment Setup","text":"<p>Ensure you have Python 3.10 or higher installed on your machine.</p> <p>To keep your API key secure, set it as environment variable. Open your terminal and run the following command, substituting the placeholder with your actual data:</p> <pre><code>export WHYHOW_API_KEY=&lt;YOUR_WHYHOW_API_KEY&gt;\n</code></pre>"},{"location":"tutorial/#install-whyhow-sdk","title":"Install WhyHow SDK","text":"<p>If you haven't already, install the <code>WhyHow SDK</code> using pip:</p> <pre><code>pip install whyhow\n</code></pre>"},{"location":"tutorial/#configure-the-whyhow-client","title":"Configure the WhyHow Client","text":"<p>With your environment variable set, you can now configure the <code>WhyHow</code> client in your Python script. The client will automatically read in your environment variable, or you can override this value by specifying it in the client constructor.</p> <pre><code>from whyhow import WhyHow\n\nclient = WhyHow(api_key=&lt;your WhyHow API key&gt;)\n</code></pre>"},{"location":"tutorial/#option-1-create-the-knowledge-graph-from-a-schema","title":"Option 1 - Create the Knowledge Graph from a schema","text":"<p>First, you need to define the workpsace for your project and specify the paths to your Harry Potter book documents. Your workspace is a logical grouping of the raw data you upload, the schema you define, and the graphs you create. Workspace are meant to be tightly scoped to your use case. You can create as many workspaces as you want.</p> <pre><code>workspace = client.workspaces.create(name=\"Harry Potter\")\ndocuments = [\n    \"path/to/harry_potter_and_the_philosophers_stone.pdf\",\n    \"path/to/harry_potter_and_the_chamber_of_secrets.pdf\"\n    # Add paths to the rest of the Harry Potter series documents\n]\n\n# Add documents to your workspace\ndocuments_uploaded = []\nfor document_path in documents:\n    document = client.documents.upload(\n        document_path,\n        workspace_id=workspace.workspace_id\n    )\n    documents_uploaded.append(document)\nprint(\"Documents Added:\", documents_uploaded)\n</code></pre> <p>WhyHow also supports creating a graph from structured data in the form of a CSV file.</p> <p>Next, you must create a schema which defines the entities, relationships, and patterns you'd like to use to construct the graph.</p> <pre><code># Create schema\nfrom whyhow.schemas import SchemaEntity, SchemaRelation, SchemaTriplePattern\n\nentity_1 = SchemaEntity(\n    name=\"character\",\n    description=\"A person appearing in the book, e.g., Harry Potter, Ron Weasley, Hermione Granger, Albus Dumbledore.\"\n)\nentity_2 = SchemaEntity(\n    name=\"object\",\n    description=\"Inanimate items that characters use or interact with, e.g., wand, Philosopher's Stone, Invisibility Cloak, broomstick.\"\n)\n\nrelation_1 = SchemaRelation(\n    name=\"friends with\",\n    description=\"Denotes a friendly relationship between characters.\"\n)\nrelation_2 = SchemaRelation(\n    name=\"interacts with\",\n    description=\"Describes a scenario in which a character engages with another character, creature, or object.\"\n)\n\nentities = [entity_1, entity_2]\nrelations = [relation_1, relation_2]\npatterns = [\n    SchemaTriplePattern(\n        head=entity_1,\n        relation=relation_1,\n        tail=entity_1,\n        description=\"One character is friends with another, e.g., Harry Potter is friends with Ron Weasley.\"\n    ),\n    SchemaTriplePattern(\n        head=entity_1,\n        relation=relation_2,\n        tail=entity_2,\n        description=\"A character interacting with an object, e.g., Harry Potter interacts with the Invisibility Cloak.\"\n    ),\n]\n\nschema = client.schemas.create(\n    workspace_id=workspace.workspace_id,\n    name=\"Harrpy Potter Schema\",\n    entities=entities,\n    relations=relations,\n    patterns=patterns,\n)\n</code></pre> <p>Then, create the graph using the schema and the uploaded documents in the workspace:</p> <pre><code># Create graph from schema and documents\ngraph = client.graphs.create(\n    workspace_id=workspace.workspace_id,\n    schema_id=schema.schema_id,\n    name=\"Harry Potter Graph\",\n)\n# Creating your graph\n</code></pre>"},{"location":"tutorial/#option-2-create-the-knowledge-graph-from-seed-questions","title":"Option 2 - Create the Knowledge Graph from seed questions","text":"<p>Alternatively, you can create a graph using seed concepts in the form of questions written in natural language. We'll create a new workspace and upload the same data.</p> <pre><code>workspace = client.workspaces.create(name=\"Harry Potter\")\ndocuments = [\n    \"path/to/harry_potter_and_the_philosophers_stone.pdf\",\n    \"path/to/harry_potter_and_the_chamber_of_secrets.pdf\"\n    # Add paths to the rest of the Harry Potter series documents\n]\n\n# Add documents to your workspace\ndocuments_uploaded = []\nfor document_path in documents:\n    document = client.documents.upload(\n        document_path,\n        workspace_id=workspace.workspace_id\n    )\n    documents_uploaded.append(document)\nprint(\"Documents Added:\", documents_uploaded)\n</code></pre> <p>Create the schema from the seed questions:</p> <pre><code>questions = [\"What does Harry look like?\",\"What does Hermione look like?\",\"What does Ron look like?\"]\nentities, relations, patterns = client.schemas.generate(\n    questions=questions,\n)\nprint(\"Entities:\", entities)\nprint(\"Relations:\", relations)\nprint(\"Patterns:\", patterns)\n\nschema = client.schemas.create(\n    workspace_id=workspace.workspace_id,\n    name=\"Harrpy Potter Auto-Generated Schema\",\n    entities=entities,\n    relations=relations,\n    patterns=patterns,\n)\n\n# Create graph from schema and documents\ngraph_auto = client.graphs.create(\n    workspace_id=workspace.workspace_id,\n    schema_id=schema.schema_id,\n    name=\"Harry Potter Auto-Generated Graph\",\n)\n# Creating your graph\n</code></pre>"},{"location":"tutorial/#querying-the-knowledge-graph","title":"Querying the Knowledge Graph","text":"<p>With the graphs created, you can now query them to find specific information:</p> <pre><code># Query graph created from schema\nquestion = \"Who is Harry friends with?\"\nquery = client.graphs.query_unstructured(\n    graph_id=graph.graph_id,\n    query=question,\n)\nprint(\"Query Response:\", query.answer)\n\n# Query graph created from seed questions\nquestion = \"Who has a flamming hair?\"\nquery = client.graphs.query_unstructured(\n    graph_id=graph_auto.graph_id,\n    query=question,\n)\nprint(\"Query Response:\", query.answer)\n\n# Include the chunks in the query\nquestion = \"Who is Harry friends with?\"\nquery = client.graphs.query_unstructured(\n    graph_id=graph.graph_id,\n    query=question,\n    include_chunks=True,\n)\nprint(\"Query Response:\", query.answer)\n</code></pre>"},{"location":"tutorial/#exporting-the-knowledge-graph","title":"Exporting the Knowledge Graph","text":"<p>You can export the graph as a Cypher query to use in Neo4j or other graph databases:</p> <pre><code>cypher = client.graphs.export_cypher(graph_id=graph.graph_id)\nprint(cypher)\n</code></pre>"}]}